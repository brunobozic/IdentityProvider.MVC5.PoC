//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Services.Logging.WCF.TestHarness.WcfLogServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LogToWCFServiceRequest", Namespace="http://schemas.datacontract.org/2004/07/Logging.WCF.Models")]
    [System.SerializableAttribute()]
    public partial class LogToWCFServiceRequest : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private Services.Logging.WCF.TestHarness.WcfLogServiceReference.LoggingEventDto LoggingEventDtoField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public Services.Logging.WCF.TestHarness.WcfLogServiceReference.LoggingEventDto LoggingEventDto {
            get {
                return this.LoggingEventDtoField;
            }
            set {
                if ((object.ReferenceEquals(this.LoggingEventDtoField, value) != true)) {
                    this.LoggingEventDtoField = value;
                    this.RaisePropertyChanged("LoggingEventDto");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LoggingEventDto", Namespace="http://schemas.datacontract.org/2004/07/Logging.WCF.Models.DTOs")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Exception))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(log4net.Core.LocationInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(log4net.Core.StackFrameItem[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(log4net.Core.StackFrameItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(log4net.Core.MethodItem))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(log4net.Core.LoggingEventData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(log4net.Core.Level))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(string[]))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(System.Collections.Generic.Dictionary<object, object>))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(Services.Logging.WCF.TestHarness.WcfLogServiceReference.LogToWCFServiceRequest))]
    public partial class LoggingEventDto : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DisplayNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DomainField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Exception ExceptionObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ExceptionStringField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private log4net.Core.LocationInfo LocationInformationField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LoggerNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private log4net.Core.LoggingEventData LoggingEventDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object MessageObjectField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Collections.Generic.Dictionary<object, object> PropertiesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RenderedMessageField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private object RepositoryField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThreadNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime TimeStampField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DisplayName {
            get {
                return this.DisplayNameField;
            }
            set {
                if ((object.ReferenceEquals(this.DisplayNameField, value) != true)) {
                    this.DisplayNameField = value;
                    this.RaisePropertyChanged("DisplayName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Domain {
            get {
                return this.DomainField;
            }
            set {
                if ((object.ReferenceEquals(this.DomainField, value) != true)) {
                    this.DomainField = value;
                    this.RaisePropertyChanged("Domain");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Exception ExceptionObject {
            get {
                return this.ExceptionObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionObjectField, value) != true)) {
                    this.ExceptionObjectField = value;
                    this.RaisePropertyChanged("ExceptionObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ExceptionString {
            get {
                return this.ExceptionStringField;
            }
            set {
                if ((object.ReferenceEquals(this.ExceptionStringField, value) != true)) {
                    this.ExceptionStringField = value;
                    this.RaisePropertyChanged("ExceptionString");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identity {
            get {
                return this.IdentityField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentityField, value) != true)) {
                    this.IdentityField = value;
                    this.RaisePropertyChanged("Identity");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public log4net.Core.LocationInfo LocationInformation {
            get {
                return this.LocationInformationField;
            }
            set {
                if ((object.ReferenceEquals(this.LocationInformationField, value) != true)) {
                    this.LocationInformationField = value;
                    this.RaisePropertyChanged("LocationInformation");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LoggerName {
            get {
                return this.LoggerNameField;
            }
            set {
                if ((object.ReferenceEquals(this.LoggerNameField, value) != true)) {
                    this.LoggerNameField = value;
                    this.RaisePropertyChanged("LoggerName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public log4net.Core.LoggingEventData LoggingEventData {
            get {
                return this.LoggingEventDataField;
            }
            set {
                if ((this.LoggingEventDataField.Equals(value) != true)) {
                    this.LoggingEventDataField = value;
                    this.RaisePropertyChanged("LoggingEventData");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object MessageObject {
            get {
                return this.MessageObjectField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageObjectField, value) != true)) {
                    this.MessageObjectField = value;
                    this.RaisePropertyChanged("MessageObject");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Collections.Generic.Dictionary<object, object> Properties {
            get {
                return this.PropertiesField;
            }
            set {
                if ((object.ReferenceEquals(this.PropertiesField, value) != true)) {
                    this.PropertiesField = value;
                    this.RaisePropertyChanged("Properties");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RenderedMessage {
            get {
                return this.RenderedMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.RenderedMessageField, value) != true)) {
                    this.RenderedMessageField = value;
                    this.RaisePropertyChanged("RenderedMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public object Repository {
            get {
                return this.RepositoryField;
            }
            set {
                if ((object.ReferenceEquals(this.RepositoryField, value) != true)) {
                    this.RepositoryField = value;
                    this.RaisePropertyChanged("Repository");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThreadName {
            get {
                return this.ThreadNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ThreadNameField, value) != true)) {
                    this.ThreadNameField = value;
                    this.RaisePropertyChanged("ThreadName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime TimeStamp {
            get {
                return this.TimeStampField;
            }
            set {
                if ((this.TimeStampField.Equals(value) != true)) {
                    this.TimeStampField = value;
                    this.RaisePropertyChanged("TimeStamp");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserName {
            get {
                return this.UserNameField;
            }
            set {
                if ((object.ReferenceEquals(this.UserNameField, value) != true)) {
                    this.UserNameField = value;
                    this.RaisePropertyChanged("UserName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WcfLogServiceReference.ILogWcf")]
    public interface ILogWcf {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogWcf/LogToWcf", ReplyAction="http://tempuri.org/ILogWcf/LogToWcfResponse")]
        void LogToWcf(Services.Logging.WCF.TestHarness.WcfLogServiceReference.LogToWCFServiceRequest request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ILogWcf/LogToWcf", ReplyAction="http://tempuri.org/ILogWcf/LogToWcfResponse")]
        System.Threading.Tasks.Task LogToWcfAsync(Services.Logging.WCF.TestHarness.WcfLogServiceReference.LogToWCFServiceRequest request);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ILogWcfChannel : Services.Logging.WCF.TestHarness.WcfLogServiceReference.ILogWcf, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class LogWcfClient : System.ServiceModel.ClientBase<Services.Logging.WCF.TestHarness.WcfLogServiceReference.ILogWcf>, Services.Logging.WCF.TestHarness.WcfLogServiceReference.ILogWcf {
        
        public LogWcfClient() {
        }
        
        public LogWcfClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public LogWcfClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogWcfClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public LogWcfClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void LogToWcf(Services.Logging.WCF.TestHarness.WcfLogServiceReference.LogToWCFServiceRequest request) {
            base.Channel.LogToWcf(request);
        }
        
        public System.Threading.Tasks.Task LogToWcfAsync(Services.Logging.WCF.TestHarness.WcfLogServiceReference.LogToWCFServiceRequest request) {
            return base.Channel.LogToWcfAsync(request);
        }
    }
}
